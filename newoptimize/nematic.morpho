// Test the MeshAdapter on a nematic in a circular disk

import meshtools
import meshgen
import optimize4
import plot
import "problemadapter.morpho"

var dom = CircularDomain([0,0], 1)
var mg = MeshGen(dom, [-1..1:0.2, -1..1:0.2], quiet=true)
var m = mg.build()
m.addgrade(1)
m = ChangeMeshDimension(m, 3)

var n = Field(m, Matrix([1,0,0]))

fn visualize(n) {
    var g = Graphics()
    var m = n.mesh()
    var ll = Length().total(m)/m.count(1)/2
    print ll
    for (id in 0...m.count()) {
        var x = m.vertexposition(id)
        g.display(Cylinder(x-ll*n[0,id],x+ll*n[0,id],aspectratio=0.2,color=White))
    }
    return g
}

var bnd = Selection(m, boundary=true)

var problem = OptimizationProblem(m)

var ln = Nematic(n)
problem.addenergy(ln)

var la = LineIntegral(fn (x, n) (tangent().inner(n))^2, n)
problem.addenergy(la, selection=bnd, prefactor=-1)

var cn = NormSq(n)
problem.addlocalconstraint(cn, target=1)

var adapt = ProblemAdapter(problem, n)
var control = PenaltyController(adapt)
control.optimize(15)

Show(plotmesh(m, grade=1)+visualize(n))
