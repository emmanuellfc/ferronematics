import optimize4
import meshtools
import plot
import povray

var m = Mesh("dense_disk.mesh")
var bnd = Selection(m, boundary=true)
bnd.addgrade(0)
var nn = Field(m, Matrix([0.01*random(1), 0.01*random(1)]))

// POVRaytracer function for exporting plot
// fn tracer(fig, file_name) {
//   var pov = POVRaytracer(fig)
//   pov.viewangle = 32
//   pov.light = [Matrix([3,3,10]), Matrix([-3,3,10]), Matrix([0,-3,10])]
//   pov.render(file_name)
// }

// Order Parameter and Polarization Vavlues
var t2 = 0.2
var t4 = -0.2
var s = 0.4
var P0 = s*sqrt(-t2/(2*t4))

// Functional Definitions //
// Landau-like expansion for the polarization Field: Bulk
fn landau(x, nn) {
  var nnt = nn.norm()
  var nt2 = nnt*nnt
  return t2*nt2 + t4*nt2*nt2
}

// Auxiliar function: Getting scalar order parameter
fn qtoorder(q) {
  var S = 2*q.norm()
  return S
}

// Problem definition
var lp = GradSq(nn)                                            // Penalization for distortions in the polarization
var lt = Length()
var bulk = AreaIntegral(landau, nn)

// Constraints
var ln = NormSq(nn) // Unit-length constraint
var laa = Area()    //Area constraint

// Set up the optimization problem
var WQ = 0.5   // strength of the apolar anchoring
var WP = -3    // strength of the polar anchoring
var sigma = 0.1

var problem = OptimizationProblem(m)
problem.addenergy(lp)
problem.addenergy(bulk)
// problem.addenergy(lt, selection = bnd, prefactor = sigma)
problem.addconstraint(laa)
problem.addlocalconstraint(ln, field = nn, target = 1)

var adapt = ProblemAdapter(problem, nn)
var control = PenaltyController(adapt, mu0=1)
control.optimize(15)

// Show results
fn visualize(m, nn, dl) {
  var v = m.vertexmatrix()
  var nv = m.count()
  var g = Graphics()
  for (i in 0...nv) {
    var x = v.column(i)
      g.display(Arrow(x-nn[i]*dl, x+nn[i]*dl, aspectratio=0.1))
  }
  return g
}

// Display results
var S = Field(m, 0)
for (i in 0...m.count()) S[i]=qtoorder(nn[i])
var sb = ScaleBar(posn=[1.2,0,0], length=1, textcolor=Black)
var splot = plotfield(S, style="interpolate", scalebar=sb, colormap=PlasmaMap())
// var gnn   = visualize(m, nn, 0.05)
var gdisp = splot//+gnn
Show(gdisp)
