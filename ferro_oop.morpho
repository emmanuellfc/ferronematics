// OOP Version for Ferronematics Code //

import optimize
import plot
import meshtools
import functionals
import povray
import vtk

// Phenomenological parameters //
var ITERS = 2000  // Total iterations
var NS = 0.1      // Noise Strength
var K = 4.5
var AA = 0.1      // Apolar Anchoring Strength
var PA = 0.1      // Polar Anchoring Strength
var T1 = -2.025   // Tau1 Parameter
var T2 = 0.405142 // Tau1 Parameter
//

fn landau(x, q) {
  var qn = q.norm()
  var q2 = qn * qn
  return T1*q2 + T2*q2*q2
}

class FerroSimulation{
  init(tau1=1, tau2=1) {
    self.tau1 = tau1
    self.tau2 = tau2
    self.mesh = nil
    self.director = nil
  }

  initialMesh() {
    var dom = fn - (x[0]^2+x[1]^2-1)
    var mg = MeshGen(dom, [-1..1:delta, -1..1:delta])
    self.mesh = mg.build()
    self.mesh.addgrade(1)
    return self.mesh
  }

  loadMesh(fname) {
    self.mesh = Mesh(fname)
  }

  loadVTK(fname) {
    var vtkimp = VTKImporter(fname)
    self.mesh = vtkimp.mesh()
    self.director = vtkimp.field("director")
  }

  saveVTK(fname) {
    var vtkexp = VTKExporter(self.director, fieldname = "director")
    vtkexp.export(fname)
  }

  initialField() {
    self.director = Field(self.mesh, fn (x,y,z) Matrix([1,0]))
  }

  setupSelections(){
    self.bnd = Selection(self.mesh, boundary=true)
    return self.bnd
  }

  setupProblem() {
    self.problem = OptimizationProblem(self.mesh)
    var lbulk = AreaIntegral(landau, self.director)
  }

}
